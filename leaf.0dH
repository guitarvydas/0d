#def tag ‚ü®#Direction down up across ‚ù≤pass through‚ù≥‚ü©
#def tag ‚ü®#Input in‚ü©
#def tag ‚ü®#Output out‚ü©
#def dtype ‚ü®Sender component port‚ü©
#def dtype ‚ü®Receiver component port‚ü©
#def dtype ‚ü®MessageWithoutDebug port data‚ü©
#def dtype ‚ü®Message port data origin trail‚ü©
#def dtype ‚ü®Connection direction sender receiver‚ü©
#def tag ‚ü®#YesNo yes no‚ü©
#def dtype ‚ü®Data Value‚ü©
#def dtype Value = ‚ü®#YesNo‚ü© | * 

#def constructor Leaf (ùúåfunc) { ‚ú¶armed ‚ú¶completed } {
    ≈°.func ‚â£ ùúåfunc
    ≈°.reset ‚â£ ≈æreset
    ≈°.‚ù≤completed ?‚ù≥ ‚â£ Œª‚ù≤completed ?‚ù≥
    ≈°.handle ‚â£ ≈æhandle
    ≈°.step ‚â£ ≈æstep
    ≈°/‚ù≤clear outputs‚ù≥

    ≈°/reset
    ‚ú¶armed ‚áí ≈°
}


#def procedure ‚ù≤clear outputs‚ù≥ {
  #lang js (self) ¬´
    self.outputs = [];
  ¬ª
}

#def function handle (ùúåmessage ùúåsendFunction) {
    #?≈° {
        #?≈° ‚ú¶armed {
            #inner function send (ùúåport ùúådata ùúåtrace) {
                ≈°.outputs/push (‚ü®Message ùúåport ùúådata ≈° ùúåtrace‚ü©)
            }
            #synonym val ‚â£ ≈°/func (ùúåmessage  ùúåsend) {
                ≈°.outputs/push (‚ü®Message ‚ü®#Output out‚ü© val ≈° ùúåmessage‚ü©)
                ‚ú¶completed ‚áí ≈°
            }
        }
	#?≈° ‚ú¶completed {
            #/die 'Leaf not armed'
        }        
    }
}

#def procedure step (ùúåsendFunction) {
    /*
    nothing to do
    Leaf calls its function once, then doesn't call it again until reset() has been called
    protocol: (1) call reset (2) call handle (3) call step 0 or more times
    in a Leaf, (3) step should only be called after (2) handle has been called, hence, there is nothing left to do in step
    in a Leaf (3) step is called only after the Leaf is in the completed state - step is a no-op in Leaf
    */
    #?≈° {
        #?≈° ‚ú¶completed {}
        #?≈° ‚ú¶armed {
            #/die 'internal error: Leaf/step called on armed leaf'
        }
    }
}

#def procedure reset {
    ‚ú¶armed ‚áí ≈° /* armed => ready to run function, completed => function already executed once */
}

#def function ‚ù≤completed ?‚ù≥ {
    #? ≈° {
        #?≈° ‚ú¶armed     {‚ü®#YesNo no‚ü©}
        #?≈° ‚ú¶completed {‚ü®#YesNo yes‚ü©}
   }
}








