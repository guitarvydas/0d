
NestingGrammar {

  topLevel [items+] = ‛«items»’
  
  item_pattern [p] = ‛«p»’
  item_container [c] = ‛«c»’
  item_leaf [L] = ‛«L»’
  item_whitespace [s] = ‛«s»’

  iteminpattern_container [c] = ‛«c»’
  iteminpattern_leaf [uc+] = ‛«uc»’

  leaf [sp1* c1+ sp2* c2*] = ‛«sp1»«c1»«sp2»«c2»’
  container [b] = ‛«b»’

  runOfSpaces [s+] = ‛«s»’
  runOfUninterestingChars [cs+] = ‛«cs»’
  uninterestingChar [c] = ‛«c»’

  bracket [c] = ‛«c»’
  // bracketed [x] ... handled implicitly by Ohm-JS
  brack [lb item+ rb] = ‛«lb»«item»«rb»’
  verbatim [lq cs* rq] = ‛«lq»«cs»«rq»’
  name [n] = ‛«n»’
  bracketedName [lb cs+ rb] = ‛❲«cs»❳’
  classicName [nFirst nRest*] = ‛«nFirst»«nRest»’
  nameFirst [c] = ‛«c»’
  nameRest [c] = ‛«c»’

  literal [c] = ‛«c»’
  pattern [_k1 _k2 _k3 _k4 _k5 _k6 _k7 _k8 _k9 _k10 _k11 _s12 _k13 _k14 _k15 _k16 _k17 _k18 _k19 _k20 _s21 child _s22 _k23 cport _k24 _s25 _k26 _k27 _k28 _k29 _k30 _k31 _k32 _k33 _k34 _k35 _s36 _k37 p _k38 _k39 ] = ‛⟨Connection ⟨#Direction up⟩ ⟨Sender «child» «cport»⟩ ⟨Receiver š «p»⟩⟩’
}

