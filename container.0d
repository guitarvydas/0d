./fab/fab - MessageSynonym message-synonym.ohm message-synonym.fab <container.0d
#def tag ⟨#Direction down up across ❲pass through❳⟩
#def tag ⟨#Input in⟩
#def tag ⟨#Output out⟩
#def dtype ⟨Sender component port⟩
#def dtype ⟨Receiver component port⟩
#def dtype ⟨Message port data⟩
#def dtype ⟨MessageWithDebug port data origin trail⟩
#def dtype ⟨Connection direction sender receiver⟩
#def tag ⟨#YesNo yes no⟩
#def dtype ⟨Data Value⟩
#def dtype Value = ⟨#YesNo⟩ | * 

#def constructor Container (𝜌childrenArray 𝜌map) 
    {✦armed ✦completed}
{
    š.reset ≣ žreset
    š.❲completed ?❳ ≣ λ❲completed ?❳
    š.handle ≣ λhandle
    š.step ≣ λstep
    š.setChildren ≣ λsetChildren
    š.setRoutings ≣ λsetRoutings
    š.outputs ≣ [⟨#Output⟩]

    /* helper functions */
    š.acceptInput ≣ žacceptInput
    š.mergeOutputs ≣ λmergeOutputs
    š.route ≣ žroute
    š.runToCompletion ≣ žrunToCompletion

    š.children ≣ 𝜌childrenArray
    š/❲set parent of children❳ (š)
    š.routingMap ≣ 𝜌map
}

#def procedure ❲set parent of children❳ {
  #lang js (self) «
    self.children.forEach (child => {
        child.container = self;
    });
  »
}

#def procedure reset () {
  ∀ š.children 𝜏child {
    𝜏child/reset
  }
}

#def function ❲completed ?❳ {
  #lang js (self) «
    var done = true;
    self.children.forEach (child => {
        done = done & child.completed___Q ();
    });
    return done;
  »
}

#def procedure handle (𝜌message) {
    š/reset
    #?š {
        #?š ✦completed {
            die 'internal error: container.handle called on completed container'
        } 
        #?š ✦armed {}
    }
    š/acceptInput (𝜌message)
    #inner function send (𝜌port 𝜌data) {
        š.outputs/push (⟨MessageWithDebug 𝜌port 𝜌data š 𝜌message⟩)
    }
    š/runToCompletion (žsend)
    š.outputs/push (⟨MessageWithDebug ⟨#Output out⟩ ϕ š 𝜌message⟩)
}

#internal procedure acceptInput (𝜌message) {
    #clear š.outputs
    ∀ š.routingMap 𝜏connection {
        #?⟨#Direction⟩ 𝜏connection {
          #?⟨#Direction down⟩ {
            #synonym childOutputs ≣ 𝜏connection.receiver/handle (⟨MessageWithDebug 𝜏connection.port 𝜌message.data š 𝜌message⟩ žsendProcedure) {
                š/mergeOutputs (childOutputs)
            }
          }
          #?⟨#Direction ❲pass through❳⟩ {
            #synonym childOutputs ≣ [⟨MessageWithDebug 𝜏connection.port 𝜌message.data š 𝜌message⟩] {
                š/mergeOutputs (childOutputs)
            }
          }
          #?⟨#Direction across⟩ {}
          #?⟨#Direction up⟩ {}
        }
    }
}

#internal function mergeOutputs (𝜌childOutputs) {
    /* merge childOutputs with self.outputs in situ */
    /* outputs & childOutputs are queues
       copy from least recent to most recent */
  #lang js (childOutputs) «
    var clonedOuts = Array.from (self.outputs);
    var childOuts = childOutputs.reverse ();
    childOuts.forEach (cout => {
        clonedOutputs.push (cout);
    });
    return clonedOutputs;
  »
}

#internal procedure runToCompletion (𝜌sendProcedure) {
     #lang js «
         while (! «š/completed») {
             «š/step (𝜌sendProcedure)»
             «š/route (𝜌sendProcedure)»
         }
     »
     #lang cl «
         (loop while (not «š/completed»)
             do (progn «š/step (𝜌sendProcedure)»
                       «š/route (𝜌sendProcedure)»))
     »
}

#def procedure step (𝜌sendProcedure) {
    ∀ š.children 𝜏child {
        𝜏child/step (𝜌sendProcedure)
    }
}

function route (𝜌sendProcedure) {
    #synonym ❲deferred message stack❳ ≣ [] {
        ∀ š.routingMap 𝜏connection {
            #?⟨#Direction⟩ 𝜏connection.direction {
                #?⟨#Direction up⟩ #?⟨#Direction across⟩ {
                    #synonym ❲output message❳ ≣ 𝜏connection.sender.outputs {
                        ❲deferred message stack❳/push (⟨Dest connection.receiver connection.port message⟩)

                    }
                }
                #?⟨#Direction down⟩ #?⟨#Direction ❲pass through❳⟩ {}
            }
        }
        ∀ ❲deferred message stack❳ 𝜏dest {
	    #synonym m ≣ ⟨MessageWithDebug 𝜏dest.port 𝜏dest.message.data š 𝜏dest.message⟩ {
                𝜏dest.target/handle (m 𝜌sendProcedure)
            }
        }
    }
}


