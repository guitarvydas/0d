ZeroD {
  comment [left cs* right] = ‛«left»«cs»«right»’
  commentInnards_rec [left cs* right] = ‛«left»«cs»«right»’
  commentInnards_flat [c] = ‛«c»’
  space [c] = ‛«c»’
  sq [c] = ‛«c»’
  string [left cs* right] =  ‛«left»«cs»«right»’
  kp [c] = ‛’
  lambdaPrefix [c] = ‛’
  procedurePrefix [c] = ‛’
  statePrefix [c] = ‛’
  parameterPrefix [c] = ‛’

  new [c] = ‛«c»’
  call [c] = ‛.’
  self [c] = ‛this’
  phi [c] = ‛null’
  temp [c] = ‛’
  forAll [c] = ‛«c»’
  query [c] = ‛«c»’
  defineop [c] = ‛=’
  unaryOperator [c] = ‛«c»’

  dot [c] = ‛«c»’
  updateState [c] = ‛«c»’
  binaryOperator [c] = ‛«c»’

  verbatimBegin [c] = ‛«c»’
  verbatimEnd [c] = ‛«c»’
  compoundNameBegin [c] = ‛«c»’
  compoundNameEnd [c] = ‛«c»’
  dtypeBegin [c] = ‛«c»’
  dtypeEnd [c] = ‛«c»’
  tagBegin [c] = ‛«c»’
  tagEnd [c] = ‛«c»’

  nameBracket [c] = ‛«c»’
  dtypeBracket [c] = ‛«c»’
  verbatimBracket [c] = ‛«c»’
  tagBracket [c] = ‛«c»’
  bracket [c] = ‛«c»’
  delimiter [c] = ‛«c»’

  def [k c] = ‛«k»«c»’
  inner [k c] = ‛«k»«c»’
  private [k c] = ‛«k»«c»’
  synonym [k c] = ‛«k»«c»’
  lang [k c] = ‛«k»«c»’
  keyword [kw] = ‛«kw»’

  main [definition+] = ‛«definition»’
  Definition [x] = ‛«x»’
  definition [x] = ‛«x»’
  Immediate [x] = ‛«x»’

  FunctionDefinition [def k name FormalParameterList? Block] = ‛\nfunction «name» «FormalParameterList» «Block»’
  ProcedureDefinition [def k name FormalParameterList? Block] = ‛\nfunction «name» «FormalParameterList» «Block»’
  InnerFunctionDefinition [inner k name FormalParameterList? Block] = ‛\nfunction «name» «FormalParameterList» «Block»’
  InnerProcedureDefinition [inner k name FormalParameterList? Block] = ‛\nfunction «name» «FormalParameterList» «Block»’
  UnexportedFunctionDefinition [private k name FormalParameterList? Block] = ‛\nfunction «name» «FormalParameterList» «Block»’
  UnexportedProcedureDefinition [private k name FormalParameterList? Block] = ‛\nfunction «name» «FormalParameterList» «Block»’
  ConstructorDefinition [def k name FormalParameterList? PossibleStates ConstructorBlock] = ‛\nfunction «name» «FormalParameterList» «ConstructorBlock»}’
  ConstructionExpression [e] = ‛«e» ’
  ConstructorFieldAssign [name defineop Expression] = ‛\n«name» = «Expression»;’
  Expression [e] = ‛«e» ’

  primary_methodCallOfSelf [x] = ‛«x»’
  primary_methodCallOfPrimary [x] = ‛«x»’
  primary_builtinCall [x] = ‛«x»’
  primary_fieldOfSelf [x] = ‛«x»’
  primary_fieldOfPrimary [p dot name] = ‛«p»«dot»«name»’
  primary_temp [x] = ‛«x»’
  primary_function [k name] = ‛«k»«name»’
  primary_procedure [k name] = ‛«k»«name»’
  primary_parameter [k name] = ‛«k»«name»’
  primary_state [x] = ‛«x»’
  primary_instantiation [x] = ‛«x»’
  primary_null [x] = ‛«x»’
  primary_dtype [x] = ‛«x»’
  primary_tag [x] = ‛«x»’
  primary_dtypeList [x] = ‛«x»’
  primary_tagList [x] = ‛«x»’
  primary_genericList [x] = ‛«x»’
  primary_string [x] = ‛«x»’
  primary_synonym [x] = ‛«x»’
  primary_langfunction [x] = ‛«x»’
  primary_langsnippet [x] = ‛«x»’
  primary_self [x] = ‛«x»’
  primary_name [x] = ‛«x»’

  variable_primary [x] = ‛«x»’
  variable_methodCallOfSelf [x] = ‛«x»’
  variable_methodCallOfPrimary [x] = ‛«x»’
  variable_builtinCall [x] = ‛«x»’
  variable_fieldOfSelf [x] = ‛«x»’
  variable_fieldOfPrimary [p dot name] = ‛«p»«dot»«name»’
  variable_temp [x] = ‛«x»’
  variable_parameter [k x] = ‛«k»«x»’
  variable_langsnippet [x] = ‛«x»’
  variable_self [x] = ‛«x»’
  variable_name [x] = ‛«x»’

  selfFieldName [self dot name] = ‛«self»«dot»«name»’
  temporaryName [temp name] = ‛«temp»«name»’
  stateName [prefix name] = ‛«prefix»«name»’
  SelfMethodCall [self call name ActualParameterList?] = ‛«self»«call»«name»«ActualParameterList»’
  MethodCall [primary call name ActualParameterList?] = ‛«primary»«call»«name»«ActualParameterList»’
  BuiltinCall [kp call name ActualParameterList?] = ‛«kp»«call»«name»«ActualParameterList»’
  Instantiation [n primary ActualParameterList?] = ‛«n»«primary»«ActualParameterList»’
  LangFunction [lang name ActualParameterList verbatim] = ‛«lang»«name»«ActualParameterList»«verbatim»’
  LangSnippet [lang name verbatim] = ‛«lang»«name»«verbatim»’

  verbatim [left innards+ right] = ‛«left»«innards»«right»’
  verbatimInnards_switchGrammars [left expr right] = ‛«left»«expr»«right»’
  verbatimInnards_flat [c] = ‛«c»’
  expr [x] = ‛«x»’

  TagName [left name right] = ‛«left»«name»«right»’
  TagDefinition [def k left name tags+ right] = ‛’
  TagValue [left name e+ right] = ‛«left»«name»«e»«right»’

  DtypeName [left name right] = ‛«left»«name»«right»’
  DtypeDefinition_compound [def k name eq CompoundDtype more*] = ‛’
  DtypeDefinition_single [def k left name fieldname+ right] = ‛’
  DtypeValue [left name e+ right] = ‛«left»«name»«e»«right»’
  MoreCompound_any [k star] = ‛«k» «star» ’
  MoreCompound_named [k name] = ‛«k» «name» ’
  CompoundDtype [x] = ‛«x»’

  listEnd [c] = ‛«c»’
  genericListBegin [c] = ‛«c»’
  DtypeList [left DtypeName e* right] = ‛«left»«DtypeName» «e» «right»’
  TagList [left TagName e* right] = ‛«left»«TagName» «e» «right»’
  GenericList [left k e* right] = ‛«left»«k» «e» «right»’

  name_compoundName [x] = ‛«x»’
  name_self [x] = ‛«x»’
  name_null [x] = ‛«x»’
  name_basicName [x] = ‛«x»’

  compoundName [left cs* right] = ‛«jsmangle (cs)»’
  basicName [nameFirst nameRest*] = ‛«nameFirst»«nameRest»’
  nonSpecialName [name] = ‛«name»’
  nameFirst [c] = ‛«c»’
  nameRest [c] = ‛«c»’

  StateQueryExpression [caselabels+ left clause+ right] = ‛«caselabels» «left» «clause» «right»’
  DtypeQueryExpression [caselabels+ v left clause+ right] = ‛«caselabels» «v» «left» «clause» «right»’
  TagQueryExpression [caselabels+ v left clause+ right] = ‛«caselabels» «v» «left» «clause» «right»’
  ForallExpression [k e temp Block] = ‛«e».forAll («temp» => «Block»);’

  StateQueryClause [k self name Block] = ‛«k» «self» «name» «Block»’
  DtypeQueryClause [k name v Block] = ‛«k» «name» «v» «Block»’
  TagQueryClause [k name v Block] = ‛«k» «name» «v» «Block»’

  querySelf [k ws n] = ‛«k»«ws»«n»’
  queryDtypeName [k ws n] = ‛«k»«ws»«n»’
  queryTagName [k ws n] = ‛«k»«ws»«n»’

  StateUpdateExpression [e k self] = ‛\n«self» = «e»;’

  ActualParameterList [left x* right] = ‛«left»«x»«right»’
  pname [k name] = ‛«name», ’
  ActualParameterExpression [e] = ‛«e», ’

  PossibleStates [left snames+ right] = ‛«left»«snames»«right»’
  sname [k name] = ‛«k»«name» ’

  Block [left e* right] = ‛{«e»\n}’
  ConstructorBlock [left e* right] = ‛\n«left»«e»«right»’

  SynonymScopedBlock [k name op e Block] = ‛\n{\nvar «name» = «e»; \n«Block»’

  FormalParameterList_withformals [left x* right] = ‛«left»«x»«right»’
  FormalParameterList_withoutformals [] = ‛()’

}
